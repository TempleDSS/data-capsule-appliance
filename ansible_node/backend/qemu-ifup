#!/bin/sh
#
# Copyright IBM, Corp. 2010  
#
# Authors:
#  Anthony Liguori <aliguori@us.ibm.com>
#
# This work is licensed under the terms of the GNU GPL, version 2.  See
# the COPYING file in the top-level directory.

set -e

export PATH="/usr/sbin:/usr/bin:/sbin:/bin"

if [ $(whoami) != "root" ]; then
  echo "$0: Not running as root! (running as $(whoami))"
  exit 1
fi

if [ "$#" -lt 3 ]; then
  echo "$0: Invalid argument count to $0"
  echo "Command line: '$@'"
  exit 1
fi

TAP_DEV=$1
SCRIPT_DIR=$2
GUEST_IP=$3

DHCPHOSTS=$SCRIPT_DIR/dhcp_hosts

. $SCRIPT_DIR/capsules.cfg

#------END VARIABLE INITIALIZATION------#

fail() {
    exit $@
}

do_brctl() {
    brctl "$@"
}

do_ifconfig() {
    ifconfig "$@"
}

do_dd() {
    dd "$@"
}

do_iptables_restore() {

  (
  flock -w 30 200

    if ! iptables-restore -n "$@" 2>&1; then
        cat "$@"
        exit 2
    fi

  ) 200>$SCRIPT_DIR/lock.iptables

}

do_dnsmasq() {
    dnsmasq "$@"
}

check_bridge() {
    if do_brctl show | grep "^$1" > /dev/null 2> /dev/null; then
	return 1
    else
	return 0
    fi
}

check_dnsmasq() {
  if [ -e $DNSMASQ_PID_FILE ]; then

    DNSMASQ_PID=$(cat $DNSMASQ_PID_FILE)

    if pidof dnsmasq | grep -q $DNSMASQ_PID; then
      return 1
    else
      return 0
    fi

  fi

  return 0
}

create_bridge() {
    do_brctl addbr "$1"
    do_brctl stp "$1" off
    do_brctl setfd "$1" 0
    do_ifconfig "$1" "$GATEWAY" netmask "$NETMASK" up
}

enable_ip_forward() {
    echo 1 | do_dd of=/proc/sys/net/ipv4/ip_forward > /dev/null
}

add_filter_rules() {

TAP_DEV=$1
GUEST_IP=$2

do_iptables_restore <<EOF
*nat
-A POSTROUTING -s $GATEWAY/$NETMASK -j MASQUERADE 
COMMIT
*filter
-I INPUT 1 -i $BRIDGE -d $GATEWAY -p tcp -m tcp --dport 67 -j ACCEPT 
-I INPUT 1 -i $BRIDGE -d $GATEWAY -p udp -m udp --dport 67 -j ACCEPT 
-I INPUT 1 -i $BRIDGE -d $GATEWAY -p tcp -m tcp --dport 53 -j ACCEPT 
-I INPUT 1 -i $BRIDGE -d $GATEWAY -p udp -m udp --dport 53 -j ACCEPT 
-I FORWARD 1 -i $1 -o $1 -j REJECT
-A FORWARD -s $GATEWAY/$NETMASK -i $BRIDGE -j ACCEPT 
-A FORWARD -d $GATEWAY/$NETMASK -o $BRIDGE -p tcp -m tcp --dport 22 -j ACCEPT
-A FORWARD -d $GATEWAY/$NETMASK -o $BRIDGE -m state --state RELATED,ESTABLISHED -j ACCEPT 
-A FORWARD -o $BRIDGE -j REJECT --reject-with icmp-port-unreachable 
-A FORWARD -i $BRIDGE -j REJECT --reject-with icmp-port-unreachable 

COMMIT
EOF
}

add_anti_spoof_rules() {

TAP_DEV=$1
GUEST_IP=$2

#iptables-save > $SCRIPT_DIR/cur_ip_state

do_iptables_restore <<EOF
*filter

-I INPUT 1 -m physdev --physdev-in $TAP_DEV -j REJECT
-I INPUT 1 -d $GUEST_IP -m physdev --physdev-in $TAP_DEV -j ${GUEST_IP}_FW_F_INPUT
-I INPUT 1 -s 0.0.0.0 -d 255.255.255.255 -m physdev --physdev-in $TAP_DEV -j ${GUEST_IP}_FW_F_INPUT

-I INPUT 1 -s $GUEST_IP -m physdev --physdev-in $TAP_DEV -j ${GUEST_IP}_FW_F_INPUT
-I INPUT 1 -s $GATEWAY -d 255.255.255.255 -m physdev --physdev-out $TAP_DEV -j ${GUEST_IP}_FW_F_INPUT
-I OUTPUT 1 -s 0.0.0.0 -d 255.255.255.255 -m physdev --physdev-in $TAP_DEV -j ${GUEST_IP}_FW_F_OUTPUT
-I FORWARD 1 -m physdev --physdev-in $TAP_DEV -j REJECT
-I FORWARD 1 -m physdev --physdev-is-bridged --physdev-out $TAP_DEV -j REJECT
-I FORWARD 1 -s $GUEST_IP -m physdev --physdev-in $TAP_DEV -j ${GUEST_IP}_FW_F_FORWARD
-I FORWARD 1 -d $GUEST_IP -m physdev --physdev-in $TAP_DEV -j ${GUEST_IP}_FW_F_FORWARD
-I FORWARD 1 -s $GUEST_IP -m physdev --physdev-is-bridged --physdev-out $TAP_DEV -j ${GUEST_IP}_FW_F_FORWARD
-I FORWARD 1 -d $GUEST_IP -m physdev --physdev-is-bridged --physdev-out $TAP_DEV -j ${GUEST_IP}_FW_F_FORWARD
-I FORWARD 1 -s 0.0.0.0 -d 255.255.255.255 -m physdev --physdev-in $TAP_DEV -j ${GUEST_IP}_FW_F_FORWARD
-I FORWARD 1 -s $GATEWAY -d 255.255.255.255 -m physdev --physdev-is-bridged --physdev-out $TAP_DEV -j ${GUEST_IP}_FW_F_FORWARD

COMMIT

EOF

#-I OUTPUT 1 -d $GUEST_IP -m physdev --physdev-out $TAP_DEV -j ${GUEST_IP}_FW_F_OUTPUT
#-I OUTPUT 1 -m physdev --physdev-out $TAP_DEV -j REJECT
#-I OUTPUT 1 -s $GUEST_IP -m physdev --physdev-out $TAP_DEV -j ${GUEST_IP}_FW_F_OUTPUT
#-I OUTPUT 1 -s $GATEWAY -d 255.255.255.255 -m physdev --physdev-out $TAP_DEV -j ${GUEST_IP}_FW_F_OUTPUT


}

start_dnsmasq() {
    do_dnsmasq \
	--strict-order \
	--except-interface=lo,em1 \
	--interface=$BRIDGE \
	--listen-address=$GATEWAY \
	--bind-interfaces \
	--dhcp-range=$GATEWAY,static \
	--dhcp-hostsfile=$DHCPHOSTS \
	--conf-file="" \
	--pid-file=$DNSMASQ_PID_FILE \
	--dhcp-leasefile=$DNSMASQ_LEASE_FILE \
	--dhcp-no-override \
	${TFTPROOT:+"--enable-tftp"} \
	${TFTPROOT:+"--tftp-root=$TFTPROOT"} \
	${BOOTP:+"--dhcp-boot=$BOOTP"}
#	--dhcp-range=set:subnet,$DHCPRANGE \
}

# $1: Bridge Name
setup_bridge_nat() {

  BRIDGE=$1

  if check_bridge "$BRIDGE" ; then
    create_bridge "$BRIDGE"
    enable_ip_forward
    add_filter_rules "$TAP_DEV" "$GUEST_IP"
  fi

  if check_dnsmasq; then
    start_dnsmasq "$BRIDGE"
  fi

}

setup_bridge_vlan() {

  BRIDGE=$1

  if check_bridge "$BRIDGE" ; then
    create_bridge "$BRIDGE"
  fi

  if check_dnsmasq; then
    start_dnsmasq "$BRIDGE"
  fi

}

setup_bridge_nat "$BRIDGE"

if test "$TAP_DEV" ; then
    add_anti_spoof_rules "$TAP_DEV" "$GUEST_IP"
    do_ifconfig "$TAP_DEV" 0.0.0.0 up
    do_brctl addif "$BRIDGE" "$TAP_DEV"
    #echo "$TAP_DEV" > $VM_DIR/tapdev
fi
